type Prejudice {
  id: ID!
  title: String!
  createdAt: DateTime!
  number: Int!

  book: Book!

  userFrom: User!
  userTo: User!

  answer: Answer

  relatedBooks(
    skip: Int = 0
    limit: Int = 10
    orderBy: BookOrder = {direction: ASC, field: TITLE}
  ): BookConnection!
}

type PrejudiceConnection {
  nodes: [Prejudice!]!
}

input PrejudiceOrder {
  direction: OrderDirection!
  field: PrejudiceOrderField!
}

enum PrejudiceOrderField {
  CREATED_AT
}

type Query {
  prejudice(id: ID!): Prejudice
  getPrejudice(input: GetPrejudiceInput!): GetPrejudiceResult!
  allPrejudices: [Prejudice!]!
}

input GetPrejudiceInput {
  post: UserUniqueUnion!
  received: UserUniqueUnion!
  number: Int!
}

type GetPrejudiceResult {
  possibility: Boolean!
  prejudice: Prejudice
}

type Mutation {
  postPrejudice(input: PostPrejudiceInput!): PostPrejudicePayload!
}

input PostPrejudiceInput {
  receivedUser: UserUniqueUnion!

  title: String!

  relatedBooks: [ID!]!
}

type PostPrejudicePayload {
  prejudice: Prejudice!
}
