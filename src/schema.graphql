# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer {
  id: ID!
}

type AnswerArray {
  nodes: [Answer!]!
}

input AnswerOrder {
  direction: OrderDirection!
  field: PrejudiceOrderField!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FollowUserPayload {
  from: User!
  to: User!
}

type FolloweeArray {
  nodes: [User!]!
  totalCount: Int!
}

type FollowerArray {
  nodes: [User!]!
  totalCount: Int!
}

type GetPrejudicePayload {
  prejudice: Prejudice
}

type GetUserResult {
  user: User
}

type Mutation {
  followUser(id: ID!): FollowUserPayload!
  postPrejudice(relatedBooks: [ID!]!, title: String!, userId: ID!): PostPrejudicePayload!
  unfollowUser(id: ID!): UnfollowUserPayload!
}

enum OrderDirection {
  ASC
  DESC
}

type PostPrejudicePayload {
  prejudice: Prejudice!
}

type Prejudice {
  answer: Answer
  createdAt: DateTime!
  id: ID!
  number: Int!
  posted: User!
  received: User!
  title: String!
}

type PrejudiceArray {
  nodes: [Prejudice!]!
}

input PrejudiceOrder {
  direction: OrderDirection!
  field: PrejudiceOrderField!
}

enum PrejudiceOrderField {
  CREATED_AT
}

type Query {
  allPrejudices: PrejudiceArray!
  allUsers: UserArray!
  getPrejudice(number: Int!, posted: ID!, received: ID!): GetPrejudicePayload!
  getUser(alias: ID!): GetUserResult!
  prejudice(id: ID!): Prejudice!
  user(id: String!): User!
  viewer: User!
}

type UnfollowUserPayload {
  from: User!
  to: User!
}

type User {
  alias: String!
  canPostPrejudiceTo(id: ID!): Boolean!
  canReceivePrejudiceFrom(id: ID!): Boolean!
  displayName: String!
  followees(limit: Int = 10, skip: Int = 0): FolloweeArray!
  followers(limit: Int = 10, skip: Int = 0): FollowerArray!
  id: ID!
  isFollowedBy(id: ID!): Boolean!
  isFollowing(id: ID!): Boolean!
  picture: String!
  postedAnswers(limit: Int = 10, orderBy: AnswerOrder = {direction: DESC, field: CREATED_AT}, skip: Int = 0): AnswerArray!
  postedPrejudices(limit: Int = 10, orderBy: PrejudiceOrder = {direction: DESC, field: CREATED_AT}, skip: Int = 0): PrejudiceArray!
  receivedPrejudices(limit: Int = 10, orderBy: PrejudiceOrder = {direction: DESC, field: CREATED_AT}, skip: Int = 0): PrejudiceArray!
}

type UserArray {
  nodes: [User!]!
}
